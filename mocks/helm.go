// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	model "chart-viewer/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// Helm is an autogenerated mock type for the Helm type
type Helm struct {
	mock.Mock
}

// GetTemplates provides a mock function with given fields: chartUrl, chartName, chartVersion
func (_m *Helm) GetTemplates(chartUrl string, chartName string, chartVersion string) ([]model.Template, error) {
	ret := _m.Called(chartUrl, chartName, chartVersion)

	var r0 []model.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]model.Template, error)); ok {
		return rf(chartUrl, chartName, chartVersion)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []model.Template); ok {
		r0 = rf(chartUrl, chartName, chartVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(chartUrl, chartName, chartVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValues provides a mock function with given fields: chartUrl, chartName, chartVersion
func (_m *Helm) GetValues(chartUrl string, chartName string, chartVersion string) (map[string]interface{}, error) {
	ret := _m.Called(chartUrl, chartName, chartVersion)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (map[string]interface{}, error)); ok {
		return rf(chartUrl, chartName, chartVersion)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) map[string]interface{}); ok {
		r0 = rf(chartUrl, chartName, chartVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(chartUrl, chartName, chartVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderManifest provides a mock function with given fields: chartUrl, chartName, chartVersion, valuesFileLocation
func (_m *Helm) RenderManifest(chartUrl string, chartName string, chartVersion string, valuesFileLocation string) ([]model.Manifest, error) {
	ret := _m.Called(chartUrl, chartName, chartVersion, valuesFileLocation)

	var r0 []model.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) ([]model.Manifest, error)); ok {
		return rf(chartUrl, chartName, chartVersion, valuesFileLocation)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) []model.Manifest); ok {
		r0 = rf(chartUrl, chartName, chartVersion, valuesFileLocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(chartUrl, chartName, chartVersion, valuesFileLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHelm creates a new instance of Helm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelm(t interface {
	mock.TestingT
	Cleanup(func())
}) *Helm {
	mock := &Helm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
